name: 'Setup blogc environment'
description: 'Setup a blogc environment and add it to the PATH'

inputs:
  blogc-version:
    description: 'The blogc version to setup. Must be a version, a Git reference or LATEST for latest stable release'
    required: true
    default: 'LATEST'

outputs:
  blogc-version:
    description: 'The installed blogc version. Useful when given LATEST or some Git reference as input.'
    value: ${{ steps.version.outputs.version }}

  cache-hit:
    description: 'A boolean value to indicate if a cache was hit'
    value: ${{ steps.cache-restore.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Check runner OS
      if: ${{ runner.os != 'Linux' }}
      run: |
        echo "::error title=Error hint::The setup-blogc action supports only linux"
        exit 1
      shell: bash

    - name: Resolve git reference
      id: gitref
      run: |
        ref="${{ inputs.blogc-version }}"

        if [[ "x${ref}" = xLATEST ]]; then
          ref="$(
            git \
              -c versionsort.suffix=- \
              ls-remote \
                --exit-code \
                --refs \
                --sort=version:refname \
                --tags \
                https://github.com/blogc/blogc.git \
                "v*.*.*" \
            | cut -d/ -f3- \
            | tail -n 1
          )"
        fi

        if [[ "${ref}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          ref="v${ref}"
        fi

        if git ls-remote --exit-code https://github.com/blogc/blogc.git "${ref}" > /dev/null; then
          echo "ref=$(git ls-remote https://github.com/blogc/blogc.git "${ref}" | cut -d$'\t' -f1)" >> $GITHUB_OUTPUT
          exit 0
        fi

        # assume that ref is a hash already, pass it directly to actions/checkout
        echo "ref=${ref}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Restore blogc build from cache, if exists
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: /opt/blogc
        key: Linux-build-blogc-${{ steps.gitref.outputs.ref }}

    - name: Check out code
      if: steps.cache-restore.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: blogc/blogc
        ref: ${{ steps.gitref.outputs.ref }}
        path: .blogc-build
        fetch-depth: 0

    - name: Install dependencies
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: sudo apt install -y ronn
      shell: bash

    - name: Build blogc
      if: steps.cache-restore.outputs.cache-hit != 'true'
      working-directory: .blogc-build
      run: |
        ./autogen.sh
        ./configure \
          "CFLAGS=-Wall -g -O3" \
          --prefix=/ \
          --disable-silent-rules \
          --disable-valgrind \
          --disable-tests \
          --enable-make
        make -j$(nproc)
        sudo make DESTDIR=/opt/blogc install
      shell: bash

    - name: Delete blogc build directory
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: rm -rf .blogc-build
      shell: bash

    - name: Add blogc to PATH
      run: echo "/opt/blogc/bin" >> $GITHUB_PATH
      shell: bash

    - name: Check if blogc works
      id: version
      run: |
        blogc -v
        blogc-make -v
        echo "version=$(blogc -v | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Save blogc build to cache, if needed
      if: steps.cache-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      id: cache-save
      with:
        path: /opt/blogc
        key: Linux-build-blogc-${{ steps.gitref.outputs.ref }}
